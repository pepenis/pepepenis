sconst https = require('https');
setInterval(() => {
  https.get('https://hamster-bot-1.onrender.com/'); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
}, 300000);
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');

const token = '7223470896:AAELTVjZbT1psC3ysOCOXwI3KmEhjdM0N2I';  // –í–∞—à —Ç–æ–∫–µ–Ω
const bot = new TelegramBot(token, { polling: true });

const app = express();
const port = process.env.PORT || 3000;

var butt
// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
const messagesCache = {};
const pinnedMessages = {}; // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

bot.setMyCommands([
    { command: 'start', description: 'Start the bot' }
]);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function deleteMessageIfExists(chatId, messageId) {
    if (messageId) {
        try {
            await bot.deleteMessage(chatId, messageId);
        } catch (error) {
            console.error('Failed to delete message:', error);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ
async function pinMessageIfNotPinned(chatId, messageId, text) {
    if (pinnedMessages[chatId] !== messageId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            const chat = await bot.getChat(chatId);
            const pinnedMessage = chat.pinned_message;

            if (pinnedMessage && pinnedMessage.text !== text) {
                await bot.unpinChatMessage(chatId);
            }

            // –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.pinChatMessage(chatId, messageId);
            pinnedMessages[chatId] = messageId;
        } catch (error) {
            console.error('Failed to pin message:', error);
        }
    }
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    if(butt!==undefined){bot.deleteMessage(chatId,butt.message_id)}
    // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "Start Over", –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (messagesCache[chatId] && messagesCache[chatId].startOverMessageId) {
        await deleteMessageIfExists(chatId, messagesCache[chatId].startOverMessageId);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const initialMessage = await bot.sendMessage(chatId, "<b>‚ú¥Ô∏èWhat you can buy here:</b>", { parse_mode: 'HTML' });
    
    // –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ
    await pinMessageIfNotPinned(chatId, initialMessage.message_id, "<b>‚ú¥Ô∏èWhat you can buy here:</b>");
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    const loadingMessage = await bot.sendMessage(chatId, 'Loading...');
    
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(async () => {
        await bot.deleteMessage(chatId, loadingMessage.message_id);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π "Next"
        const animationMessage = await bot.sendPhoto(
            chatId,
            'https://cdn-icons-png.flaticon.com/256/6553/6553990.png',
            {
                caption: '*üîë Keys from Hamster games üëæ*\n\n> All keys for 1 day \\= 0\\.5$\n\n `\\*Can be ordered for a week, \n for 3 days, etc.`',
                parse_mode: 'MarkdownV2',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'Next 1/4', callback_data: 'show_referrals' }]
                    ]
                }
            }
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        messagesCache[chatId] = {
            animationMessageId: animationMessage.message_id
        };
    }, 2000);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const callbackData = query.data;

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (messagesCache[chatId]) {
        await deleteMessageIfExists(chatId, messagesCache[chatId].animationMessageId);
    }

    if (callbackData === 'show_referrals') {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π "Next" –¥–ª—è –∞–ª—å–±–æ–º–∞
        const photoMessage = await bot.sendPhoto(
            chatId,
            'https://www.iguides.ru/upload/iblock/32e/k1upzu7h4lxad3hp38ks71vn095p2zwq.png',
            {
                caption: '*üë• Referralsüí∞*\n\n _Hamsterüêπ, DOGSü¶¥, Blum‚ö´Ô∏è, Catizenüò∫, *whatever*_\n\n> 1 referral \\= 0\\.5$',
                parse_mode: 'MarkdownV2',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'Next 2/4', callback_data: 'show_album' }]
                    ]
                }
            }
        );
        if (!messagesCache[chatId]) {
            messagesCache[chatId] = {};
        }
        messagesCache[chatId].animationMessageId = photoMessage.message_id;
    } else if (callbackData === 'show_album') {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª—å–±–æ–º–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        const photos = [
            { type: 'photo', media: 'https://i.imgur.com/M4TKDUN.png', caption: '<b>üêπ Hamster Kombat Desktop App with Autoclicker üïπ</b>\n\n<i>MACOSX/Windows app with a built-in <b>clicker</b> in Hamster</i>\n\n<code>A telegram app where you can open Hamster on Desktop with clicker</code>\n\n<blockquote>Mac/Windows app file = 3.5$</blockquote>', parse_mode: 'HTML'},
            { type: 'photo', media: 'https://i.imgur.com/RPdbIgT.png' },
            { type: 'photo', media: 'https://i.imgur.com/r3i0xXb.png' }
        ];

        const albumMessages = await bot.sendMediaGroup(chatId, photos);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF-–∞–Ω–∏–º–∞—Ü–∏—é –∏ –∫–Ω–æ–ø–∫—É "Next" –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–ª—å–±–æ–º–∞
        const gifMessage = await bot.sendAnimation(
            chatId,
            'https://i.imgur.com/nLDjuCq.gif',
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'Next 3/4', callback_data: 'show_last_photo' }]
                    ]
                }
            }
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        messagesCache[chatId] = {
            albumMessages: albumMessages.map(msg => msg.message_id),
            gifMessageId: gifMessage.message_id
        };
    } else if (callbackData === 'show_last_photo') {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∞–ª—å–±–æ–º –∏ GIF)
        if (messagesCache[chatId].albumMessages) {
            for (const messageId of messagesCache[chatId].albumMessages) {
                await deleteMessageIfExists(chatId, messageId);
            }
        }
        await deleteMessageIfExists(chatId, messagesCache[chatId].gifMessageId);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π "Start Over"
        const photos = [
            { type: 'photo', media: 'https://i.imgur.com/0iVia3U.png', caption: '<b>üêπ Hamster Kombat Bot üÉè</b>\n\n<i>You can see at the photos what bot can do üéö\nBy default it can do <b>taps, boost & streak 24/7 ‚åõÔ∏è</b></i>\n\n<code>Ô∏é‚Äª - I will give all the instructions and information until you can launch the bot. But you will need your Win/Mac and a code editor like Visual Studio. The bot will work as long as your code editor is turned on\n\n‚öø - I will do everything by myself and I will launch the bot on cloud storage so the bot will work 24/7</code>\n\n<blockquote>‚Äª = 3$</blockquote>\n<blockquote>‚öø = 5$</blockquote><blockquote>1 active ref = 2$ per month‚è≥</blockquote>\n\n<b>Actual for other cryptogames, choose yourselfüåÄ</b>', parse_mode: 'HTML'},
            { type: 'photo', media: 'https://i.imgur.com/LWWMaXr.png' },
            { type: 'photo', media: 'https://i.imgur.com/bCSYbdX.png' }
        ];

        const albumMessages = await bot.sendMediaGroup(chatId, photos);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "Start Over"
        const startOverMessage = await bot.sendMessage(
            chatId,
            '<b>4/4</b>\n<blockquote>Press button below to see more info</blockquote>',
            {
                parse_mode: 'HTML',
                reply_markup: {
                    keyboard: [
                        [{ text: 'Buyü™ô+' }]
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: true
                }
            }
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        messagesCache[chatId] = {
            albumMessages: albumMessages.map(msg => msg.message_id),
            startOverMessageId: startOverMessage.message_id
        };
    }else if (callbackData === 'visa') {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π "Next" –¥–ª—è –∞–ª—å–±–æ–º–∞
        const photoMessage = await bot.sendAnimation(
            chatId,
            'https://media.tenor.com/kUtxXnZmGvUAAAAM/bnb-wikimadao.gif',
            {
                caption: '<b>‚ú¥Ô∏è Cryptocurrency ‚Çø+ üì¥</b>\n\n<blockquote>The best method</blockquote>\n\n<blockquote>You can send any crypto</blockquote>\n\n<blockquote>Low commissions</blockquote>',
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'Next 2/3', callback_data: 'crypto' }]
                    ]
                }
            }
        );
        messagesCache[chatId].animationMessageId = photoMessage.message_id;
    }else if (callbackData === 'crypto') {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π "Next" –¥–ª—è –∞–ª—å–±–æ–º–∞
        const photoMessage = await bot.sendPhoto(
            chatId,
            'https://cdn4.cdn-telegram.org/file/UPhkPWq5DcLmwZEysYh1uTvMkcRTERXB6V-K0pL-__YpIV3YFBIN5oQ3Ehq7pjrcjv2OlxQlkjySqtK748ZzVLN_TOzrC0kePtATD7rs0h_5ha3hhlbDqNVWUULWpUtW8sTLrhdpNiKrtU7jfqXPDGJ4ewqCFu3B4fJSHYoaI9AZz6aCfA4VYdLd8E0uPNc0Fe6LHVq_zi1u2JRZM6QOuxzL0LxoHhiFYXkdQKbXZVlRkPjfDMjhFFOFx1fZXggYOgKoxCExvRjg3JGxgnkKjv6jEviVi6EmLG7wtv9umhLxZ64NCKRQUQ6MvehDsmmOurtdb0WKnv6DLuv5DuB9Bg.jpg',
            {
                caption: '<b>üî∑ Telegram Wallet üàÇÔ∏è</b>\n\n<blockquote>If you want to use Telegram stuff</blockquote>\n\n<blockquote>You can make a payment\nwithout leaving app</blockquote>',
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'Next 3/3', callback_data: 'wallet' }]
                    ]
                }
            }
        );
        messagesCache[chatId].animationMessageId = photoMessage.message_id;
    }else if(callbackData === 'wallet'){    
        const textic = await bot.sendMessage(chatId,'<blockquote>Reviews - https://t.me/hamster_friends_reviews</blockquote>',{parse_mode:'HTML'})

        butt = await bot.sendMessage(chatId,'<b>Select your order and text @dvd8ewüí≠üîä</b>',
        {parse_mode:'HTML',reply_markup: {
            keyboard: [
                [{ text: 'Show products again‚û∞' }]
            ],resize_keyboard: true
        }})
        
    }

});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–µ–∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if(text==='Show products again‚û∞'){
        if(butt!==undefined){bot.deleteMessage(chatId,butt.message_id)}
        
        
            // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "Start Over", –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (messagesCache[chatId] && messagesCache[chatId].startOverMessageId) {
                await deleteMessageIfExists(chatId, messagesCache[chatId].startOverMessageId);
            }
        
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const initialMessage = await bot.sendMessage(chatId, "<b>‚ú¥Ô∏èWhat you can buy here:</b>", { parse_mode: 'HTML' });
            
            // –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ
            await pinMessageIfNotPinned(chatId, initialMessage.message_id, "<b>‚ú¥Ô∏èWhat you can buy here:</b>");
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            const loadingMessage = await bot.sendMessage(chatId, 'Loading...');
            
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(async () => {
                await bot.deleteMessage(chatId, loadingMessage.message_id);
        
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π "Next"
                const animationMessage = await bot.sendPhoto(
                    chatId,
                    'https://cdn-icons-png.flaticon.com/256/6553/6553990.png',
                    {
                        caption: '*üîë Keys from Hamster games üëæ*\n\n> All keys for 1 day \\= 0\\.5$\n\n `\\*Can be ordered for a week, \n for 3 days, etc.`',
                        parse_mode: 'MarkdownV2',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'Next 1/4', callback_data: 'show_referrals' }]
                            ]
                        }
                    }
                );
        
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                messagesCache[chatId] = {
                    animationMessageId: animationMessage.message_id
                };
            }, 2000);
        
        
        
    }


    if (text === 'Buyü™ô+') {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∞–ª—å–±–æ–º)
        if (messagesCache[chatId]) {
            if (messagesCache[chatId].albumMessages) {
                for (const messageId of messagesCache[chatId].albumMessages) {
                    await deleteMessageIfExists(chatId, messageId);
                }
            }
            await deleteMessageIfExists(chatId, messagesCache[chatId].startOverMessageId);

            // –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (pinnedMessages[chatId]) {
                await bot.unpinChatMessage(chatId);
            }
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –µ–≥–æ
            const finalMessage = await bot.sendMessage(chatId, '<b>How you can pay?üíé</b>',{parse_mode:"HTML"});
            await pinMessageIfNotPinned(chatId, finalMessage.message_id, 'How you can pay?üíé');

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            const loadingMessage = await bot.sendMessage(chatId, 'Loading...');

            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(async () => {
                await bot.deleteMessage(chatId, loadingMessage.message_id);

                const animationMessage = await bot.sendPhoto(
                    chatId,
                    'https://www.digitalsilk.com/wp-content/uploads/2023/11/online-payment-solutions-hero.jpg',
                    {
                        caption: '*üí≥ Visa, Mastercard, Paypal and other services*\n\n> Average method\n\n> Sometimes big commissions',
                        parse_mode: 'MarkdownV2',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'Next 1/3', callback_data: 'visa' }]
                            ]
                        }
                    }
                );
        
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                messagesCache[chatId] = {
                    animationMessageId: animationMessage.message_id
                };
                
            }, 1500);
        }
    }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä Express
app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});
